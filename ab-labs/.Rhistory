p1 +
geom_point(aes(size = 2),     # not quite right! 2 is not a variable, but rather a fixed value
color = "red")
hp2013Q1 <- housing %>% filter(Date == 2013.25)
ggplot(hp2013Q1,
aes(x = Land.Value,
y = Structure.Cost)) +
geom_point()
p1 <- ggplot(hp2013Q1,
aes(x = Land.Value,
y = Structure.Cost))
p1
p1 <- ggplot(hp2013Q1,
aes(x = Land.Value,
y = Structure.Cost)) +
geom_point()
p1
p1 + geom_point(aes(color = Home.Value)) +
geom_smooth(method = "lm")
p1 + geom_point(aes(color = Home.Value))
p1 +
geom_point(aes(color = Home.Value)) +
geom_smooth(se = FALSE)
p1 +
geom_point(aes(color = Home.Value)) +
geom_smooth()
p1 +
geom_point(aes(color = Home.Value)) +
geom_text(aes(label = State), size = 3)
p1 +
geom_point(aes(color = region,
shape = region),
size = 5)
p1 +
geom_point(aes(color = Home.Value))
p3 <- ggplot(housing,
aes(x = State,
y = Home.Price.Index))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4
p3 <- ggplot(housing,
aes(x = State,
y = Home.Price.Index))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4
p4 <- p4 +
scale_y_discrete(name = "State Abbreviation")
p4
p3 <- ggplot(housing,
aes(x = State,
y = Home.Price.Index))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4
p4 <- p4 +
scale_x_discrete(name = "State Abbreviation")
p4
p4 +
scale_color_continuous(name = "",
breaks = c(1975.25, 1994.25, 2013.25),
labels = c(1971, 1994, 2013))
p4 <- p4 +
scale_color_continuous(name = "",
breaks = c(1975.25, 1994.25, 2013.25),
labels = c(1971, 1994, 2013),
low = "blue", high = "red")
p4
p4 +
scale_color_gradient2(name = "",
breaks = c(1975.25, 1994.25, 2013.25),
labels = c(1971, 1994, 2013),
low = "blue",
high = "red",
mid = "gray60",
midpoint = 1994.25)
p5 <- ggplot(housing, aes(x = Date,
y = Home.Value))
p5 + geom_line(aes(color = State))
p5 + geom_line() +
facet_wrap(~State, ncol = 10)
housing_byyear <- aggregate(cbind(Home.Value, Land.Value) ~ Date, data = housing, mean)
ggplot(housing_byyear, aes(x=Date)) +
geom_line(aes(y = Home.Value), color="red") +
geom_line(aes(y = Land.Value), color="blue")
library(tidyr)
home_land_byyear <- pivot_longer(housing_byyear,
values_to = "value",
names_to = "type",
cols = c("Home.Value", "Land.Value"))
ggplot(home_land_byyear,
aes(x = Date,
y = value,
color = type)) +
geom_line()
knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(ggplot2)
library(ggplot2)
housing <- read.csv("https://amosca01.github.io/SSEP-22/data/landdata-states.csv",
header = T)
glimpse(housing)
?ggplot2
hp2013Q1 <- housing %>% filter(Date == 2013.25)
ggplot(hp2013Q1,
aes(x = Land.Value,
y = Structure.Cost)) +
geom_point()
p1 <- ggplot(hp2013Q1,
aes(x = Land.Value,
y = Structure.Cost)) +
geom_point()
p1
p1 +
geom_point(aes(color = Home.Value))
p1 +
geom_smooth(method = "lm")
p1 +
geom_point(aes(color = Home.Value)) +
geom_smooth() # If we don't specify the method, what happens?
# Check the docs for more details (?geom_smooth)
p1 +
geom_point(aes(color = Home.Value)) +
geom_smooth(se = FALSE)
p1 +
geom_point(aes(color = Home.Value)) +
geom_text(aes(label = State), size = 3)
p1 +
geom_point(aes(size = 2),     # not quite right! 2 is not a variable, but rather a fixed value
color = "red") # this is fine -- turns all points red
p1 +
geom_point(aes(color = region,
shape = region),
size = 5)
# Tweak the color scale!
p1 +
geom_point(aes(color = Home.Value))
p3 <- ggplot(housing,
aes(x = State,
y = Home.Price.Index))
p4 <- p3 + geom_point(aes(color = Date),
alpha = 0.5,
size = 1.5,
position = position_jitter(width = 0.25, height = 0))
p4
knitr::opts_chunk$set(eval = TRUE, message = FALSE)
head(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
library(dplyr)
ToothGrowth <- ToothGrowth %>%
mutate(dose = factor(dose))
library(tidyverse)
glimpse(ToothGrowth)
summary(ToothGrowth)
ToothGrowth <- ToothGrowth %>%
mutate(dose = factor(dose))
summary(ToothGrowth)
my_plot <- ggplot(ToothGrowth,
aes(x = dose,
y = len,
fill = dose)) +
geom_boxplot()
my_plot
my_plot +
scale_fill_manual(values = c("#004f71", "#465a01", "#981d97"))
library(RColorBrewer)
display.brewer.all()
myPlot +
scale_fill_brewer(palette = "Set3")
my_plot +
scale_fill_brewer(palette = "Set3")
my_plot +
scale_fill_brewer(palette = "Dark2")
install.packages("nasaweather")
library(nasaweather)
my_storms <- storms %>%
filter(year == 1995)
ggplot(my_storms,
aes(x = long,
y = lat,
color = wind)) +
geom_point() +
facet_wrap(~name)
library(ggthemes)
my_plot +
theme_economist() +
scale_fill_economist()
library(nycflights13)
flights
delays <- flights %>%
group_by(origin, month, day) %>%
summarize(avg_delay = mean(dep_delay)) %>%
mutate(date = paste0(month, "-", day))
knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
library(babynames)
babynames %>%
filter(name == "Ellis")
babynames %>%
filter(name == "Ellis") %>%
group_by(year)
babynames %>%
filter(name == "Ellis") %>%
group_by(year) %>%
summarize(N = n(),
ratio = sum(ifelse(sex == "F", n, 0)) /
sum(ifelse(sex == "M", n, 0)))
babynames %>%
filter(name == "Ellis") %>%
group_by(year) %>%
summarize(N = n(),
ratio = sum(ifelse(sex == "F", n, 0)) /
sum(ifelse(sex == "M", n, 0)),
howfaroff = abs(1 - ratio)) %>%
filter(N == 2)  %>% # Filter to years where there were M and F babies with name
arrange(howfaroff)
babynames %>%
group_by(year) %>%
summarize(num_births = sum(n)) %>%
arrange(desc(num_births))
babynames %>%
group_by(name) %>%
summarize(earliest = min(year), latest = max(year))
babynames %>%
group_by(name) %>%
summarize(num_appearances = n()) %>%
filter(num_appearances == 276)
babynames %>%
mutate(is_popular = prop >= 0.01) %>%
filter(is_popular == TRUE) %>%
group_by(name) %>%
summarize(earliest = min(year)) %>%
arrange(desc(earliest))
babynames %>%
filter(year >= 1990 & year < 2000) %>%
group_by(name) %>%
summarize(num_births = sum(n)) %>%
arrange(desc(num_births))
library(nycflights13)
flights
flights %>%
group_by(origin, month, day) %>%
summarize(num_flight = n()) %>%
group_by(origin) %>%
summarize(avg_flights = mean(num_flight))
flights %>%
group_by(carrier) %>%
summarize(total_num_flights = n(),
avg_dept_delay = mean(dep_delay),
num_unique_dest = n_distinct(dest),
num_unique_planes = n_distinct(tailnum))
delays <- flights %>%
group_by(origin, month, day) %>%
summarize(avg_delay = mean(dep_delay)) %>%
mutate(date = paste0(month, "-", day))
ewr_delays <- delays %>% filter(origin == "EWR")
jfk_delays <- delays %>% filter(origin == "JFK")
lga_delays <- delays %>% filter(origin == "LGA")
ggplot(ewr_delays, aes(x = avg_delay)) +
geom_histogram()
ggplot(jfk_delays, aes(x = avg_delay)) +
geom_histogram()
ggplot(lga_delays, aes(x = avg_delay)) +
geom_histogram()
library(nycflights13)
flights %>%
left_join(airlines, by = carrier) %>%
group_by(name) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
library(babynames)
head(births)
census_births <- births
ssa_births <- babynames
ssa_births <- ssa_births %>%
group_by(year) %>%
summarize(N = sum(n))
census_births %>%
summarize(N = n(),
earliest = min(year),
latest = max(year))
ssa_births %>%
summarize(N = n(),
earliest = min(year),
latest = max(year))
total_births_inner <- census_births %>%
inner_join(ssa_births, by = "year")
total_births_inner %>%
summarize(N = n(),
earliest = min(year),
latest = max(year))
total_births_left <- census_births %>%
left_join(ssa_births, by = "year")
total_births_left %>%
filter(is.na(N))
# create a version of ssa_births missing year 2012
ssa_births_no_2012 <- ssa_births %>%
filter(year != 2012)
total_births_left <- census_births %>%
left_join(ssa_births_no_2012, by = "year")
total_births_left %>%
filter(is.na(N))
total_births_right <- census_births %>%
right_join(ssa_births_no_2012, by = "year")
total_births_right %>%
filter(is.na(births))
ssa_births_no_2012 %>%
left_join(census_births, by = "year") %>%
filter(is.na(births))
total_births <- census_births %>%
full_join(ssa_births_no_2012, by = "year")
total_births %>%
filter(is.na(births) | is.na(N))
total_births %>%
mutate(census_equals_ssa = births == N) %>%
filter(census_equals_ssa == FALSE) %>%
summarise(num_different_counts = n())
total_births %>%
summarize( correlation = cor(births, N,
use = "complete.obs"))
library(ggplot2)
ggplot(data = total_births, aes(x = year, y = births)) +
geom_line(color = "red") +
geom_line(aes(y = N), color = "blue")
library(nycflights13)
flights %>%
left_join(airlines, by = carrier) %>%
group_by(name) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
library(nycflights13)
flights %>%
left_join(airlines, by = "carrier") %>%
group_by(name) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
flights %>%
left_join(select(airports, faa, name), by = c("dest" = "faa")) %>%
group_by(name) %>%
summarise(num_flights = n()) %>%
top_n(1)
flights %>%
inner_join(planes, by = "tailnum") %>%
group_by(tailnum, manufacturer, model) %>%
summarise(num_flights = n()) %>%
ungroup() %>%
top_n(1, num_flights)
flights %>%
left_join(airports, by = c("dest" = "faa")) %>%
summary()
flights %>%
left_join(planes, by = "tailnum") %>%
summary()
airports
flights
world_happiness <- read_csv("data/2019.csv")
knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
library(babynames)
babynames %>%
filter(name == "Logan")
babynames %>%
filter(name == "Logan") %>%
group_by(year) %>%
summarize(total = sum(prop)) %>%
arrange(desc(total)) %>%
head(1) %>%
select(year)
most_popular_year <- function(name_arg) {
babynames %>%
filter(name == name_arg) %>%
group_by(year) %>%
summarize(total = sum(prop)) %>%
arrange(desc(total)) %>%
head(1) %>%
select(year)
}
most_popular_year("Olivia")
most_popular_year("Regina")
most_popular_year("Rami")
most_popular_year("Mahershala")
formals(most_popular_year)
most_popular_year()
world_happiness <- read_csv("data/2019.csv")
world_happiness <- read_csv("/Users/abmosca/Documents/Documents/SSEP-22/data/2019.csv")
View(world_happiness)
world_happiness <- read_csv("/Users/abmosca/Documents/Documents/SSEP-22/data/2015.csv")
world_happiness <- read_csv("/Users/abmosca/Documents/Documents/SSEP-22/data/2015.csv")
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summary(mean("Economy (GDP per Capita)"))
}
world_happiness %>%
split(.$Region) %>%
map_dfr(region_gdp(.))
world_happiness %>%
group_by(.$Region) %>%
map_dfr(region_gdp(.))
regions <- world_happiness %>%
summarise(distinct(Region))
regions <- world_happiness %>%
distinct(Region)
View(regions)
# map
map(regions, region_gdp)
#test
region_gdp(world_happiness, "Western Europe")
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summary(mean(Economy (GDP per Capita)))
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summary(mean(Economy ('GDP per Capita')))
}
#test
region_gdp(world_happiness, "Western Europe")
View(region_gdp)
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summary(mean(Economy (.['GDP per Capita'])))
}
#test
region_gdp(world_happiness, "Western Europe")
world_happiness %>%
filter(Region == "Western Europe")
world_happiness %>%
filter(Region == "Western Europe") %>%
summary(mean(.['Economy (GDP per Capita)']))
world_happiness %>%
filter(Region == "Western Europe") %>%
summary(mean('Economy (GDP per Capita)'))
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summary(mean(`Economy (GDP per Capita)`))
}
#test
region_gdp(world_happiness, "Western Europe")
world_happiness %>%
filter(Region == "Western Europe") %>%
summary(mean(`Economy (GDP per Capita)`))
world_happiness %>%
filter(Region == "Western Europe") %>%
summary(mean(Family))
world_happiness %>%
filter(Region == "Western Europe") %>%
summary(mean("Family"))
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == region_name) %>%
summarize(mean(`Economy (GDP per Capita)`))
}
#test
region_gdp(world_happiness, "Western Europe")
# map
map(regions, region_gdp)
region_gdp %>%
map(regions)
region_gdp %>%
map_df(regions)
regions %>%
map_df(region_gdp)
regions <- regions$Region
regions %>%
map(region_gdp)
regions <- world_happiness %>%
unique(Region)
regions <- world_happiness %>%
select(Recion) %>%
unique()
regions <- world_happiness %>%
select(Region) %>%
unique()
regions <- world_happiness %>%
select(Region) %>%
distinct()
View(regions)
regions <- world_happiness %>%
distinct(Region)
regions <- world_happiness %>%
distinct(Region) %>%
pull(Region)
regions %>%
map(region_gdp)
regions %>%
map_df(region_gdp)
region_gdp <- function(ds, region_name) {
ds %>%
filter(Region == as.character(region_name)) %>%
summarize(mean(`Economy (GDP per Capita)`))
}
#test
region_gdp(world_happiness, "Western Europe")
regions %>%
map_df(region_gdp)
View(world_happiness)
world_happiness %>%
map_df(region_gdp)
regions %>%
map_df(world_happiness, .)
map_df(region_gdp(world_happiness, .), regions)
